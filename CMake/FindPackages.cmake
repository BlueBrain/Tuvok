# generated by Buildyard, do not edit.

include(System)
list(APPEND FIND_PACKAGES_DEFINES ${SYSTEM})
find_package(PkgConfig)

set(ENV{PKG_CONFIG_PATH} "${CMAKE_INSTALL_PREFIX}/lib/pkgconfig:$ENV{PKG_CONFIG_PATH}")
if(PKG_CONFIG_EXECUTABLE)
  find_package(OpenMP )
  if((NOT OpenMP_FOUND) AND (NOT OPENMP_FOUND))
    pkg_check_modules(OpenMP OpenMP)
  endif()
else()
  find_package(OpenMP  )
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(ZLIB 1.2)
  if((NOT ZLIB_FOUND) AND (NOT ZLIB_FOUND))
    pkg_check_modules(ZLIB ZLIB>=1.2)
  endif()
  if((NOT ZLIB_FOUND) AND (NOT ZLIB_FOUND))
    message(FATAL_ERROR "Could not find ZLIB")
  endif()
else()
  find_package(ZLIB 1.2  REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(Qt4 4.6 COMPONENTS QtCore QtGui QtXml QtOpenGL)
  if((NOT Qt4_FOUND) AND (NOT QT4_FOUND))
    pkg_check_modules(Qt4 Qt4>=4.6)
  endif()
  if((NOT Qt4_FOUND) AND (NOT QT4_FOUND))
    message(FATAL_ERROR "Could not find Qt4")
  endif()
else()
  find_package(Qt4 4.6  REQUIRED QtCore QtGui QtXml QtOpenGL)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(BISON )
  if((NOT BISON_FOUND) AND (NOT BISON_FOUND))
    pkg_check_modules(BISON BISON)
  endif()
  if((NOT BISON_FOUND) AND (NOT BISON_FOUND))
    message(FATAL_ERROR "Could not find BISON")
  endif()
else()
  find_package(BISON   REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(FLEX )
  if((NOT FLEX_FOUND) AND (NOT FLEX_FOUND))
    pkg_check_modules(FLEX FLEX)
  endif()
  if((NOT FLEX_FOUND) AND (NOT FLEX_FOUND))
    message(FATAL_ERROR "Could not find FLEX")
  endif()
else()
  find_package(FLEX   REQUIRED)
endif()

if(PKG_CONFIG_EXECUTABLE)
  find_package(OpenGL )
  if((NOT OpenGL_FOUND) AND (NOT OPENGL_FOUND))
    pkg_check_modules(OpenGL OpenGL)
  endif()
  if((NOT OpenGL_FOUND) AND (NOT OPENGL_FOUND))
    message(FATAL_ERROR "Could not find OpenGL")
  endif()
else()
  find_package(OpenGL   REQUIRED)
endif()


if(EXISTS ${CMAKE_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
  include(${CMAKE_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
endif()

if(OPENMP_FOUND)
  set(OpenMP_name OPENMP)
  set(OpenMP_FOUND TRUE)
elseif(OpenMP_FOUND)
  set(OpenMP_name OpenMP)
  set(OPENMP_FOUND TRUE)
endif()
if(OpenMP_name)
  list(APPEND FIND_PACKAGES_DEFINES TUVOK_USE_OPENMP)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenMP")
  link_directories(${${OpenMP_name}_LIBRARY_DIRS})
  if(NOT "${${OpenMP_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${OpenMP_name}_INCLUDE_DIRS})
  endif()
endif()

if(ZLIB_FOUND)
  set(ZLIB_name ZLIB)
  set(ZLIB_FOUND TRUE)
elseif(ZLIB_FOUND)
  set(ZLIB_name ZLIB)
  set(ZLIB_FOUND TRUE)
endif()
if(ZLIB_name)
  list(APPEND FIND_PACKAGES_DEFINES TUVOK_USE_ZLIB)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} ZLIB")
  link_directories(${${ZLIB_name}_LIBRARY_DIRS})
  if(NOT "${${ZLIB_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${ZLIB_name}_INCLUDE_DIRS})
  endif()
endif()

if(QT4_FOUND)
  set(Qt4_name QT4)
  set(Qt4_FOUND TRUE)
elseif(Qt4_FOUND)
  set(Qt4_name Qt4)
  set(QT4_FOUND TRUE)
endif()
if(Qt4_name)
  list(APPEND FIND_PACKAGES_DEFINES TUVOK_USE_QT4)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Qt4")
  link_directories(${${Qt4_name}_LIBRARY_DIRS})
  if(NOT "${${Qt4_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Qt4_name}_INCLUDE_DIRS})
  endif()
endif()

if(BISON_FOUND)
  set(BISON_name BISON)
  set(BISON_FOUND TRUE)
elseif(BISON_FOUND)
  set(BISON_name BISON)
  set(BISON_FOUND TRUE)
endif()
if(BISON_name)
  list(APPEND FIND_PACKAGES_DEFINES TUVOK_USE_BISON)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} BISON")
  link_directories(${${BISON_name}_LIBRARY_DIRS})
  if(NOT "${${BISON_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${BISON_name}_INCLUDE_DIRS})
  endif()
endif()

if(FLEX_FOUND)
  set(FLEX_name FLEX)
  set(FLEX_FOUND TRUE)
elseif(FLEX_FOUND)
  set(FLEX_name FLEX)
  set(FLEX_FOUND TRUE)
endif()
if(FLEX_name)
  list(APPEND FIND_PACKAGES_DEFINES TUVOK_USE_FLEX)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} FLEX")
  link_directories(${${FLEX_name}_LIBRARY_DIRS})
  if(NOT "${${FLEX_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${FLEX_name}_INCLUDE_DIRS})
  endif()
endif()

if(OPENGL_FOUND)
  set(OpenGL_name OPENGL)
  set(OpenGL_FOUND TRUE)
elseif(OpenGL_FOUND)
  set(OpenGL_name OpenGL)
  set(OPENGL_FOUND TRUE)
endif()
if(OpenGL_name)
  list(APPEND FIND_PACKAGES_DEFINES TUVOK_USE_OPENGL)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} OpenGL")
  link_directories(${${OpenGL_name}_LIBRARY_DIRS})
  if(NOT "${${OpenGL_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${OpenGL_name}_INCLUDE_DIRS})
  endif()
endif()

set(TUVOK_BUILD_DEBS autoconf;automake;cmake;doxygen;git;git-review;pkg-config;subversion)

set(TUVOK_DEPENDS OpenMP;ZLIB;Qt4;BISON;FLEX;OpenGL)

# Write defines.h and options.cmake
if(NOT PROJECT_INCLUDE_NAME)
  message(WARNING "PROJECT_INCLUDE_NAME not set, old or missing Common.cmake?")
  set(PROJECT_INCLUDE_NAME ${CMAKE_PROJECT_NAME})
endif()
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${CMAKE_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/defines${SYSTEM}.h")
list(APPEND COMMON_INCLUDES ${DEFINES_FILE})
set(DEFINES_FILE_IN ${DEFINES_FILE}.in)
file(WRITE ${DEFINES_FILE_IN}
  "// generated by CMake/FindPackages.cmake, do not edit.\n\n"
  "#ifndef ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF}=1)
  file(APPEND ${DEFINES_FILE_IN}
  "#ifndef ${DEF}\n"
  "#  define ${DEF} 1\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
if(CMAKE_MODULE_INSTALL_PATH)
  install(FILES ${OPTIONS_CMAKE} DESTINATION ${CMAKE_MODULE_INSTALL_PATH}
    COMPONENT dev)
else()
  message(WARNING "CMAKE_MODULE_INSTALL_PATH not set, old or missing Common.cmake?")
endif()
file(APPEND ${DEFINES_FILE_IN}
  "\n#endif\n")

include(UpdateFile)
configure_file(${DEFINES_FILE_IN} ${DEFINES_FILE} COPYONLY)
if(Boost_FOUND) # another WAR for broken boost stuff...
  set(Boost_VERSION ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION})
endif()
if(CUDA_FOUND)
  string(REPLACE "-std=c++11" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
  string(REPLACE "-std=c++0x" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
endif()
if(FIND_PACKAGES_FOUND)
  if(MSVC)
    message(STATUS "Configured with ${FIND_PACKAGES_FOUND}")
  else()
    message(STATUS "Configured with ${CMAKE_BUILD_TYPE}${FIND_PACKAGES_FOUND}")
  endif()
endif()
